#!/usr/bin/env python3
"""Test agent with OpenAI API using a small subset of data"""

import json
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../../../..'))

from src.backend.agent import ActivityProcessor

def create_test_data():
    """Create a small subset of test data."""
    # Create test calendar data (just 3 events)
    calendar_data = [
        {
            "event_id": "test1",
            "summary": "Development Work",
            "description": "Working on authentication system",
            "start_time": "2024-08-30T14:00:00Z",
            "end_time": "2024-08-30T16:00:00Z",
            "duration_minutes": 120,
            "text": "Development Work: Working on authentication system",
            "html_link": "https://calendar.google.com/event/test1"
        },
        {
            "event_id": "test2", 
            "summary": "Team Meeting",
            "description": "Sprint planning session",
            "start_time": "2024-08-30T10:00:00Z",
            "end_time": "2024-08-30T11:00:00Z", 
            "duration_minutes": 60,
            "text": "Team Meeting: Sprint planning session",
            "html_link": "https://calendar.google.com/event/test2"
        },
        {
            "event_id": "test3",
            "summary": "Code Review", 
            "description": "Review pull requests",
            "start_time": "2024-08-30T16:30:00Z",
            "end_time": "2024-08-30T17:00:00Z",
            "duration_minutes": 30,
            "text": "Code Review: Review pull requests", 
            "html_link": "https://calendar.google.com/event/test3"
        }
    ]
    
    # Create test notion data
    notion_data = [
        {
            "block_id": "notion1",
            "block_type": "paragraph",
            "text": "Implemented user authentication with JWT tokens",
            "hierarchy": ["Projects", "Auth System", "Implementation"]
        }
    ]
    
    # Save test files
    with open('test_calendar.json', 'w') as f:
        json.dump(calendar_data, f, indent=2)
    
    with open('test_notion.json', 'w') as f:
        json.dump(notion_data, f, indent=2)
    
    print("‚úÖ Created test data files")
    return 'test_notion.json', 'test_calendar.json'

def test_with_openai():
    """Test the agent with OpenAI API using small dataset."""
    print("=== Testing AI Agent with OpenAI API ===\n")
    
    # Create small test dataset
    notion_file, calendar_file = create_test_data()
    
    # Load API key from .env and initialize processor  
    from src.backend.agent import load_api_key
    api_key = load_api_key()
    processor = ActivityProcessor(openai_api_key=api_key)
    
    # Test output directory
    output_dir = "openai_test_output"
    os.makedirs(output_dir, exist_ok=True)
    
    try:
        print("üöÄ Running agent with OpenAI API...")
        report = processor.process_daily_activities(
            notion_file=notion_file,
            calendar_file=calendar_file,
            output_raw_file=f"{output_dir}/raw_activities.json",
            output_processed_file=f"{output_dir}/processed_activities.json"
        )
        
        print(f"\n‚úÖ Success! OpenAI-powered processing completed!")
        print(f"üìä Results:")
        print(f"  - Status: {report['status']}")
        print(f"  - Activities processed: {report['processed_counts']['raw_activities']}")
        print(f"  - Unique tags generated: {report['tag_analysis']['total_unique_tags']}")
        print(f"  - Average tags per activity: {report['tag_analysis']['average_tags_per_activity']}")
        
        if report['tag_analysis']['top_tags']:
            print(f"\nüè∑Ô∏è Tags generated by OpenAI:")
            for tag, count in report['tag_analysis']['top_tags'][:5]:
                print(f"    {tag}: {count} activities")
        
        # Show a sample tagged activity
        with open(f"{output_dir}/raw_activities.json", 'r') as f:
            activities = json.load(f)
            if activities:
                sample = activities[0]
                tags = sample.get('raw_data', {}).get('tags', [])
                print(f"\nüìù Sample activity tags:")
                print(f"  Activity: {sample.get('details', '')[:50]}...")
                print(f"  Tags: {tags}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # Clean up test files
        for file in [notion_file, calendar_file]:
            if os.path.exists(file):
                os.remove(file)

if __name__ == "__main__":
    test_with_openai()